<style lang="less">
@import "colorui/main.wxss";
@import "colorui/icon.wxss";
@import './style/weui.less';

.container {
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    box-sizing: border-box;
}

.margin-left-auto {
    margin-left: auto;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import {getStorage} from "@/common/storage";


export default class extends wepy.app {
    config = {
        pages: [
            'pages/index',
            'pages/login',
            'pages/example',
            'pages/exercise',
            'pages/exercise-history',
            'pages/exercise-detail',
            'pages/create-exercise',
            'pages/edit-exercise',
            'pages/student',
            'pages/student-second',
            'pages/wrongproblem',
            'pages/wrongproblem-detail',
            'pages/create-wrongproblem',
            'pages/edit-wrongproblem',
            'pages/todaygrade',
            'pages/create-todayexercise',
            'pages/learnsituation',
            'pages/my',
            'pages/edit-password',
            'pages/askquestion',
            'pages/askquestion-detail',
        ],
        window: {
            backgroundTextStyle: 'light',
            navigationBarBackgroundColor: '#fff',
            navigationBarTitleText: 'WeChat',
            navigationBarTextStyle: 'black'
        },
        "tabBar": {
            "list": [
                {
                    "pagePath": "pages/index",
                    "iconPath": "images/homepage.png",
                    "selectedIconPath": "images/homepagefill.png",
                    "text": "主页"
                },
                {
                    "pagePath": "pages/exercise",
                    "iconPath": "images/exercise.png",
                    "selectedIconPath": "images/exercisefill.png",
                    "text": "习题"
                },
                {
                    "pagePath": "pages/my",
                    "iconPath": "images/my.png",
                    "selectedIconPath": "images/myfill.png",
                    "text": "我的"
                }
            ]
        },
        useExtendedLib: {
            weui: true
        },
        usingComponents: {
            "cu-custom": "/colorui/components/cu-custom",
        },
    }

    globalData = {
        userInfo: null,
        serverUrl: "https://www.kaigestudy.top:8080",
    }

    onLaunch() {
        let token = getStorage("sessionToken");
        if (!token) {
            setTimeout(() => {
                wx.navigateTo({url: "login"})
            }, 100)
        }
        this.globalData.userInfo = getStorage("userInfo");
    }

    // 设置带有cookie的request header，每次request都带这个header
    setHeader() {
        let header = {
            'Content-type': 'application/json; charset=utf-8',
            'TTToken': getStorage("sessionToken") //读取本地保存好的上一次cookie
        };
        return header
    }

    req(type, url, data) {
        const header = { // 根据需求设置请求头Authorization
            'content-type': 'application/json',
            'TTToken': getStorage('sessionToken')
        };
        wx.showNavigationBarLoading();
        return new Promise((resolve, reject) => { // 返回一个Promise
            wx.request({
                url: this.globalData.serverUrl + url, // 请求地址
                data: data, // 请求参数
                header: header,
                method: type,
                success: (res) => {
                    if (res.statusCode === 401) {
                        wx.removeStorageSync("sessionToken");
                        wx.removeStorageSync("userInfo");
                        this.onLaunch();
                        reject(res);
                    }
                    resolve(res);
                },
                fail: function (err) {
                    reject(err);
                },
                timeout: 10000
            });
        });
    }

    postWithToken = (url, data) => {
        if(!getStorage('sessionToken')){
            return Promise.reject("No token")
        }
        return this.post(url, data)
    }

    post = (url, data) => {
        return this.req('POST', url, data);
    }

    getWithToken = (url, data) => {
        if(!getStorage('sessionToken')){
            return Promise.reject("No token")
        }
        return this.get(url, data)
    }

    get = (url, data) => {
        return this.req('GET', url, data);
    }
}
</script>
