<!-- exercise.wpy -->
<style lang="less">
page {
  width: 100vw;
  overflow: hidden;
}

.exercise_item{
    padding:20rpx;
    border: grey solid 1rpx;
}

.exercise_upper{
    display: flex;
    flex-direction: row;
    align-items: center; 
       
}

.title{
    overflow:hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    width: 360rpx;
}

.grade{
    margin: 20rpx;    
}

.tab-bar-title__selected {
    font-size: 20px;
    font-weight: bold;
}

.weui-tabs-swiper {
    width: 100%;
    height: 100px;
}

.DrawerPage {
  position: fixed;
  width: 100vw;
  height: 100vh;
  left: 0vw;
  background-color: #f1f1f1;
  transition: all 0.4s;
}

.DrawerPage.show {
  transform: scale(0.9, 0.9);
  left: 85vw;
  box-shadow: 0 0 60rpx rgba(0, 0, 0, 0.2);
  transform-origin: 0;
}

.DrawerWindow {
  background-color: white;
  position: absolute;
  width: 85vw;
  height: 100vh;
  left: 0;
  top: 0;
  transform: scale(0.9, 0.9) translateX(-100%);
  opacity: 0;
  pointer-events: none;
  transition: all 0.4s;
}

.DrawerWindow.show {
  transform: scale(1, 1) translateX(0%);
  opacity: 1;
  pointer-events: all;
}

.DrawerClose {
  position: absolute;
  width: 40vw;
  height: 100vh;
  right: 0;
  top: 0;
  color: transparent;
  padding-bottom: 30rpx;
  display: flex;
  align-items: flex-end;
  justify-content: center;
  background-image: linear-gradient(90deg, rgba(0, 0, 0, 0.01), rgba(0, 0, 0, 0.6));
  letter-spacing: 5px;
  font-size: 50rpx;
  opacity: 0;
  pointer-events: none;
  transition: all 0.4s;
}

.DrawerClose.show {
  opacity: 1;
  pointer-events: all;
  width: 15vw;
  color: #fff;
}

.DrawerPage .cu-bar.tabbar .action button.icon {
  width: 64rpx;
  height: 64rpx;
  line-height: 64rpx;
  margin: 0;
  display: inline-block;
}

.DrawerPage .cu-bar.tabbar .action .cu-avatar {
  margin: 0;
}

.DrawerPage .nav {
  flex: 1;
}

.DrawerPage .nav .cu-item.cur {
  border-bottom: 0;
  position: relative;
}

.DrawerPage .nav .cu-item.cur::after {
  content: "";
  width: 10rpx;
  height: 10rpx;
  background-color: currentColor;
  position: absolute;
  bottom: 10rpx;
  border-radius: 10rpx;
  left: 0;
  right: 0;
  margin: auto;
}

.DrawerPage .cu-bar.tabbar .action {
  flex: initial;
}

.DeleteButton{
    color: red;
}

</style>

<template>
<scroll-view scroll-y class="DrawerPage {{modalName=='viewModal'?'show':''}}">
    <!-- 习题列表那一行 -->
    <view class="flex bg-white align-center padding">
        <view wx:if="{{!isSelectAll}}" class="padding flex-sub text-left" @tap="onClickSelectAll">
            全选
        </view>
        <view wx:else class="padding flex-sub text-left" @tap="onClickNonSelectAll">
            取消全选
        </view>
        <view class="padding flex-sub text-center text-black text-lg text-bold">
            布置习题
        </view>
        <view class="padding flex-sub text-right text-orange" @tap="onClickSubmit">
            布置
        </view>
    </view>

    <!-- 搜索 -->
    <view class="cu-bar search bg-white">
        <view class="search-form round">
            <text class="cuIcon-search"></text>
            <input wx:if="{{activeTab==0}}" type="text" placeholder="搜索题目" confirm-type="search" @input="inputChangeSearchExercise"></input>
            <input wx:if="{{activeTab==1}}" type="text" placeholder="搜索学生" confirm-type="search" @input="inputChangeSearchStudent"></input>
        </view>
    </view>


    <!-- tabbar -->
    <view class="justify-between flex bg-white align-center padding-lr-xs">
        <scroll-view class="bg-white nav" scroll-x scroll-with-animation style="width:70vw">
            <view class="cu-item {{index==activeTab?'text-orange cur':''}}" wx:for="{{tabbar}}" wx:key wx:for-item="item" @tap="tabSelectIndex" data-id="{{index}}">
                {{item}}
            </view>
        </scroll-view>
        <view wx:if="{{activeTab==0}}" class="bg-white margin-tb solid-left flex align-center" @tap="showModal" data-target="viewModal">
            <view class="margin-lr-xs text-sm">筛选</view>
            <image class="" style="width:40rpx;height:40rpx" src="{{imageScreen}}"/>
        </view>
    </view>
    

    <!-- 习题列表 -->
    <view wx:if="{{activeTab==0}}" wx:for="{{exerciseList}}" wx:key="index" wx:for-item="exercise" data-id="{{index}}" @tap="onClickExercise">
        <view class="padding-left padding-right bg-white solid-bottom" >
            <view class="flex p-xs mb-sm align-center">
                <!-- 左 -->
                <view class="flex-sub padding-sm">
                    <image style="width:30rpx;height:30rpx" src="{{selectIconOfExercise[exercise.Eid]}}"></image>
                </view>
                <!-- 中 -->
                <view class="flex-treble padding-sm">
                    <!-- 里面两行，上面行 -->
                    <view class="exercise_upper">
                        <!-- 题目难度标签 -->
                        <view class="cu-tag radius bg-{{difficultyColor[exercise.Edifficulty]}} light margin-right-xs">
                            {{exercise.Edifficulty}}
                        </view>
                        <!-- 题目title -->
                        <view class="title margin-lr-xs">
                            {{exercise.Etitle}}
                        </view>
                        
                    </view>

                    <!-- 下面行 -->
                    <view class="flex">
                        <view class="margin-right-xs">
                            {{exercise.Esubject}}
                        </view>
                        <view class="margin-lr-xs">
                            {{exercise.Etype}}
                        </view>
                    </view>
                </view>
                <!-- 右 -->
                <view class="flex-twice padding-sm">
                    <view class="text-center text-xs">
                        {{exercise.Egrade}}
                    </view>
                </view>
            </view>
        </view>
    </view>

    <!-- 学生列表 -->
    <view wx:if="{{activeTab==1}}" wx:for="{{studentList}}" wx:key="index" wx:for-item="student" data-id="{{index}}" @tap="onClickStudent">
        <view class="bg-white flex solid-bottom align-center padding-lr">
            <!-- 选中图标 -->
            <view class="flex-sub padding-sm">
                <image style="width:30rpx;height:30rpx" src="{{selectIconOfStudent[student.Sid]}}"></image>
            </view>

            <!-- 学生头像 -->
            <view class="flex-sub padding-sm">
                <image class="cu-avatar round" src="{{imgUrl + student.Sicon}}"></image>
            </view>
            
            <!-- 学生信息 -->
            <view class="flex-treble text-center padding-sm">{{student.Snickname}}</view>
            <view class="flex-treble text-center padding-sm">{{student.SgradeName}}</view>
            <view class="flex-treble text-center padding-sm">{{student.Cname}}</view>
        </view>
    </view>
</scroll-view>

<view class="DrawerClose {{modalName=='viewModal'?'show':''}}" @tap="hideModal">
    <text class="cuIcon-pullright"></text>
</view>

<scroll-view scroll-y class="DrawerWindow {{modalName=='viewModal'?'show':''}}">
<!--    <view class="flex padding">
        <view class="flex-sub padding" @tap="onClickReset">重置</view>
        <view class="flex-sub padding text-center" style="font-weight:bold">筛选习题</view>
        <view class="flex-sub padding text-right" style="color:blue" @tap="hideModal">完成</view>
    </view>
    <view>
        <view class="margin" style="font-weight:bold">年级</view>
        <view class="grid col-{{exerciseField.Egrade.length>3?3:exerciseField.Egrade.length}} margin text-center">
            <view  wx:for="{{exerciseField.Egrade}}" wx:key>
                <button class="round cu-btn lines-{{screenCur.gradeCur==index?'blue':'gray'}} shadow padding margin-tb-sm" @tap="tabSelect" data-name="grade" data-id="{{index}}">{{exerciseField.Egrade[index]}}</button>
            </view>
        </view>
    </view>
    <view>
        <view class="margin" style="font-weight:bold">习题难度</view>
        <view class="grid col-{{exerciseField.Edifficulty.length>4?4:exerciseField.Edifficulty.length}} margin text-center">
            <view  wx:for="{{exerciseField.Edifficulty}}" wx:key>
                <button class="round cu-btn lines-{{screenCur.difficultyCur==index?'blue':'gray'}} shadow padding margin-tb-sm" @tap="tabSelect" data-name="difficulty" data-id="{{index}}">{{exerciseField.Edifficulty[index]}}</button>
            </view>
        </view>
    </view>
    <view>
        <view class="margin" style="font-weight:bold">习题类型</view>
        <view class="margin">学科</view>
        <view class="grid col-{{exerciseField.Esubject.length>4?4:exerciseField.Esubject.length}} margin text-center">
            <view  wx:for="{{exerciseField.Esubject}}" wx:key>
                <button class="round cu-btn lines-{{screenCur.subjectCur==index?'blue':'gray'}} shadow padding margin-tb-sm" @tap="tabSelect" data-name="subject" data-id="{{index}}">{{exerciseField.Esubject[index]}}</button>
            </view>
        </view>
        <view class="margin">题型</view>
        <view class="grid margin text-center col-{{exerciseField.Etype[exerciseField.Esubject[screenCur.subjectCur]].length>3?3:exerciseField.Etype[exerciseField.Esubject[screenCur.subjectCur]].length}}">
            <view  wx:for="{{exerciseField.Etype[exerciseField.Esubject[screenCur.subjectCur]]}}" wx:key wx-for-item="item">
                <button class="round cu-btn lines-{{screenCur.typeCur==index?'blue':'gray'}} shadow padding margin-tb-sm" @tap="tabSelect" data-name="type" data-id="{{index}}">{{item}}</button>
            </view>
        </view>
        <view class="margin">单元</view>
        <view class="grid margin text-center col-{{exerciseField.Eunit[exerciseField.Esubject[screenCur.subjectCur]].length>3?3:exerciseField.Eunit[exerciseField.Esubject[screenCur.subjectCur]].length}}">
            <view  wx:for="{{exerciseField.Eunit[exerciseField.Esubject[screenCur.subjectCur]]}}" wx:key wx-for-item="item">
                <button class="round cu-btn lines-{{screenCur.unitCur==index?'blue':'gray'}} shadow padding margin-tb-sm" @tap="tabSelect" data-name="unit" data-id="{{index}}">{{item}}</button>
            </view>
        </view>
    </view>-->
    <selection-page
        :exerciseField.sync='exerciseField'
        :screenCur.sync='screenCur'
        @selectionChange.user='onSelectionChange'
        @complete.user='onComplete'
        @reset.user='onReset'
    ></selection-page>
</scroll-view>

</template>

<script>
  import wepy from 'wepy'
  import SelectionPage from "@/components/selection-page";
  import { getSearchRanges } from '../common/constant';
  export default class Index extends wepy.page {
    config = {
        "usingComponents": {
            "mp-slideview": "weui-miniprogram/slideview/slideview",
            "mp-dialog": "/miniprogram_npm/weui-miniprogram/dialog/dialog",
        }
    }
      components = {
          'selection-page': SelectionPage,
      }
    data = {
        activeTab: 0,
        tabbar: ['习题','学生'],
        exerciseList:[],
        copyExerciseList: [],
        exerciseField:{},
        screenCur: {
            subjectCur: 0,
            difficultyCur: 0,
            typeCur:0,
            gradeCur: 0,
            unitCur: 0,
        },
        exerciseIndex:-1,
        difficultyColor:{
            "简单":"cyan",
            "中等":"olive",
            "困难":"pink",
            "竞赛":"black",
        },

        imageScreen:wepy.$instance.globalData.serverUrl + '/app/file/get_image?name=icon/screen.png',
        modalName : "",
        studentList:[],
        copyStudentList: [],
        imgUrl:wepy.$instance.globalData.serverUrl + '/app/file/get_image?name=',
        noUserIcon : wepy.$instance.globalData.serverUrl + '/app/file/get_image?name=none_userinfo.png',
        selectIcon:wepy.$instance.globalData.serverUrl + '/app/file/get_image?name=icon/select.png',
        nonselectIcon:wepy.$instance.globalData.serverUrl + '/app/file/get_image?name=icon/nonselect.png',
        selectIconOfExercise: {},
        selectIconOfStudent: {},
        isSelectAll: false,
    }

    methods = {
        tabSelectIndex(e){
            let self = this
            self.activeTab = e.currentTarget.dataset.id
            // if(self.tabbar[e.currentTarget.dataset.id] == '习题'){
            //     self.methods.getExerciseSort(self)
            // }else{
            //     self.getStudentData()
            // }
            
        },

        tabSelect(e) {
            let self = this
            self.screenCur[e.currentTarget.dataset.name+"Cur"]= e.currentTarget.dataset.id
        },

        onSelectionChange({name, index}){
            this.screenCur[name+"Cur"]= index;
            if(name === "subject"){
                this.screenCur.unitCur = 0;
                this.screenCur.typeCur = 0;
            }
        },

        onComplete(){
            let self = this
            self.modalName= null
            self.getSortedWrongProblem()
        },

        onReset(){
            this.screenCur= {
                subjectCur: 0,
                difficultyCur: 0,
                typeCur:0,
                gradeCur: 0,
                unitCur: 0,
            }
        },

        showModal(e) {
            let self = this
            self.modalName= e.currentTarget.dataset.target
        },

        hideModal(e) {
            let self = this
            self.modalName= null
            self.methods.getExerciseSort(self)
        },

        dialogClose(e){
            let self = this
            self.dialogShow = false
        },

        onClickExercise(e) {
            let self = this
            let index = e.currentTarget.dataset.id
            self.selectIconOfExercise[self.exerciseList[index].Eid] = self.selectIconOfExercise[self.exerciseList[index].Eid] == self.selectIcon ? self.nonselectIcon : self.selectIcon
            
        },

        onClickStudent(e) {
            let self = this
            let index = e.currentTarget.dataset.id
            self.selectIconOfStudent[self.studentList[index].Sid] = self.selectIconOfStudent[self.studentList[index].Sid] == self.selectIcon ? self.nonselectIcon : self.selectIcon
        },

        onClickReset(){
            let self = this
            self.screenCur={
                subjectCur: 0,
                difficultyCur: 0,
                typeCur:0,
                gradeCur: 0,
                unitCur: 0,
            }
        },

        onClickSelectAll(){
            let self = this
            if(self.activeTab == 0){
                for(let i = 0; i<self.exerciseList.length; i++){
                    self.selectIconOfExercise[self.exerciseList[i].Eid] = self.selectIcon
                }
            } else if(self.activeTab == 1){
                for(let i = 0; i<self.studentList.length; i++){
                    self.selectIconOfStudent[self.studentList[i].Sid] = self.selectIcon
                }
            }
            self.isSelectAll = true
        },

        onClickNonSelectAll(){
            let self = this
            if(self.activeTab == 0){
                for(let i = 0; i<self.exerciseList.length; i++){
                    self.selectIconOfExercise[self.exerciseList[i].Eid] = self.nonselectIcon
                }
            } else if(self.activeTab == 1){
                for(let i = 0; i<self.studentList.length; i++){
                    self.selectIconOfStudent[self.studentList[i].Sid] = self.nonselectIcon
                }
            }
            self.isSelectAll = false
        },

        onClickSubmit(){
            let self = this
            let today = new Date()
            console.log(today.toLocaleDateString())
            let Eids = []
            let Sids = []
            for(var key in self.selectIconOfExercise){
                if(self.selectIconOfExercise[key] == self.selectIcon){
                    Eids.push(Number(key))
                }
            }
            for(var key in self.selectIconOfStudent){
                if(self.selectIconOfStudent[key] == self.selectIcon){
                    Sids.push(Number(key))
                }
            }
            

            if(Eids.length == 0){
                wx.showToast({
                    title: '请选择习题', //提示的内容,
                    icon: 'error', //图标,
                    mask: true, //显示透明蒙层，防止触摸穿透,
                    success: res => {}
                });
                return
            } else if(Sids.length == 0){
                wx.showToast({
                    title: '请选择学生', //提示的内容,
                    icon: 'error', //图标,
                    mask: true, //显示透明蒙层，防止触摸穿透,
                    success: res => {}
                });
                return
            }

            wepy.request({
                url:wepy.$instance.globalData.serverUrl + '/app/teacher/insert_today_exercise',
                data:{
                    Sids: Sids,
                    Eids: Eids,
                    Date:today.toLocaleDateString()
                },
                method: 'POST',
                header: wepy.$instance.setHeader(),
                success:function(res) {
                    console.log(res)
                    wx.showToast({
                              title: '布置习题成功', //提示的内容,
                              icon: 'success', //图标,
                              mask: true, //显示透明蒙层，防止触摸穿透,
                              success: res => {}
                            });
                }
            })
        },

        getExercise(self) {
            wepy.request({
                url:wepy.$instance.globalData.serverUrl + '/app/exercise/get_all_exercise',
                method:'GET',
                header: wepy.$instance.setHeader(),
                success: function(res) {
                    console.log(res)
                    if (res.data.Code == 1){
                        self.exerciseList = res.data.Data
                        self.copyExerciseList = JSON.parse(JSON.stringify(self.exerciseList)) //深拷贝

                        // 选中图标
                        for(let i=0;i<self.exerciseList.length;i++){
                            self.selectIconOfExercise[self.exerciseList[i].Eid] = self.nonselectIcon
                        }
                        self.$apply()
                    }
                }
            })
        },

        getExerciseField(self) {
            wepy.request({
                url:wepy.$instance.globalData.serverUrl + '/app/user/common/get_exercise_field',
                method:'GET',
                header: wepy.$instance.setHeader(),
                success: function(res) {
                    console.log(res)
                    if (res.data.Code == 1){
                        self.exerciseField = getSearchRanges(res.data.Data.Eunit);
                        self.$apply()
                    }
                }
            })
        },

        getExerciseSort(self) {
            wepy.request({
                url:wepy.$instance.globalData.serverUrl + '/app/exercise/get_sorted_exercise',
                method:'GET',
                header: wepy.$instance.setHeader(),
                data:{
                    subject:self.exerciseField.Esubject[self.screenCur.subjectCur],
                    type:self.exerciseField.Etype[self.exerciseField.Esubject[self.screenCur.subjectCur]][self.screenCur.typeCur],
                    unit:self.exerciseField.Eunit[self.exerciseField.Esubject[self.screenCur.subjectCur]][self.screenCur.unitCur],
                    difficulty:self.exerciseField.Edifficulty[self.screenCur.difficultyCur],
                    grade:self.exerciseField.Egrade[self.screenCur.gradeCur],
                },
                success: function(res) {
                    console.log(res)
                    if (res.data.Code == 1){
                        self.exerciseList = res.data.Data
                        self.$apply()
                    }
                }
            })
        },

        inputChangeSearchExercise(e){
            let self = this
        
            wepy.request({
                    url:wepy.$instance.globalData.serverUrl + '/app/user/common/search_exercise',
                    method:'GET',
                    header: wepy.$instance.setHeader(),
                    data:{
                        word:e.detail.value,
                    },
                    success: function(res) {
                        console.log(res)
                        if (res.data.Code == 1){
                            self.exerciseList = res.data.Data
                            self.$apply()
                        }
                    }
                })
        },

        inputChangeSearchStudent(e){
            let self = this
        
            wepy.request({
                    url:wepy.$instance.globalData.serverUrl + '/app/user/common/search_student_from_teacher',
                    method:'GET',
                    header: wepy.$instance.setHeader(),
                    data:{
                        word:e.detail.value,
                    },
                    success: function(res) {
                        console.log(res)
                        if (res.data.Code == 1){
                            self.studentList = res.data.Data
                            self.$apply()
                        }
                    }
                })
        }

    }

    getStudentData() {
        let self = this
        
        wepy.request({
                url:wepy.$instance.globalData.serverUrl + '/app/teacher/get_student_list',
                method:'GET',
                header: wepy.$instance.setHeader(),
                
                success: function(res) {
                    console.log(res)
                    if (res.data.Code == 1){
                        self.studentList = res.data.Data
                        self.copyStudentList = JSON.parse(JSON.stringify(self.studentList)) //深拷贝

                        // 图标
                        for(let i=0;i<self.studentList.length;i++){
                            self.selectIconOfStudent[self.studentList[i].Sid] = self.nonselectIcon
                        }
                        self.$apply()
                    }
                }
            })
    }

    getSortedStudentList(sortName,sortDir) {
        let self = this
        wepy.request({
                url:wepy.$instance.globalData.serverUrl + '/app/teacher/get_student_sorted_list',
                method:'GET',
                header: wepy.$instance.setHeader(),
                data:{
                    sortName:sortName,
                    sortDir:sortDir
                },
                success: function(res) {
                    console.log(res)
                    if (res.data.Code == 1){
                        self.studentList = res.data.Data
                        self.$apply()
                    }
                }
            })
    }

    onLoad(){

    }

    onShow() {
        let self = this

        self.methods.getExercise(self)
        self.methods.getExerciseField(self)

        self.getStudentData()
        
    }
  }

</script>