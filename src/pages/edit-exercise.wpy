<style>

</style>

<template>
<form @submit="formSubmit">
    <view class="flex bg-white align-center padding">
        <view class="padding flex-sub text-center text-black text-lg text-bold">
            编辑习题
        </view>
    </view>


	<view class="cu-form-group">
		<view class="title">标题</view>
		<input name="Etitle" placeholder="习题标题用于列表展示" value="{{exercise.Etitle}}"></input>
	</view>
	<view class="cu-form-group">
		<view class="title">描述</view>
		<input name="Edescription" placeholder="题目提示信息" value="{{exercise.Edescription}}"></input>
	</view>

    <view class="cu-form-group">
		<view class="title">年级</view>
        <picker bindchange="pickerGradeChange" name="Egrade" value="{{gradePicker[gradeIndex]}}" range="{{gradePicker}}">
			<view class="picker">
				<text class="text-lg">{{gradeIndex?gradePicker[gradeIndex]:exercise.Egrade}}</text>
			</view>
		</picker>
	</view>

    <view class='cu-form-group'>
        <view class='title'>学科及题型</view>
        <subject-and-type-picker :value.sync="subjectAndTypeValue"></subject-and-type-picker>
    </view>

    <view class="cu-form-group">
        <view class="title">难度</view>
        <picker bindchange="pickerDifficultyChange" name="Edifficulty" value="{{exercise.Edifficulty}}" range="{{difficultyPicker}}">
            <view class="picker">
                <text class="text-lg">{{difficultyPicker[difficultyIndex]}}</text>
            </view>
        </picker>
    </view>

    <view class='cu-form-group'>
        <view class='title'>批改方式</view>
        <picker bindchange='pickerAutoCorrectChange' name='EautoCorrect' range="{{ autoCorrectPicker}}"
                range-key="label" value="{{autoCorrectIndex}}">
            <view class='picker'>
                <text class='text-lg'>{{ autoCorrectPicker[autoCorrectIndex].label}}</text>
            </view>
        </picker>
    </view>

    <view class="cu-form-group">
        <view class="title">单元</view>
        <input name="Eunit" placeholder="【选填】一单元、二单元" value="{{exercise.Eunit}}"></input>
    </view>

	<view class="cu-form-group">
		<view class="title">习题题目文字</view>
		<input name="EnameTxt" placeholder="习题题目文字" value="{{exercise.EnameTxt}}"></input>
	</view>

    <block wx:if="{{type !== '听写'}}">
        <view class='bg-white' style='border-top:1rpx solid #eee;'>
            <name-image-list
                @imageListChange.user="onImageListOfNameChange"
                :imageList.sync='imageListOfName'
                type='add'
                title="习题题目图片"
            >
            </name-image-list>
        </view>
    </block>
    <block wx:elif>
        <view class='cu-bar bg-white' style='border-top:1rpx solid #eee;'>
            <view class='action'>
                习题题目音频
            </view>
            <view class='action'>
                {{ audioUploadPath == '' ? '0' : '1' }}/1
            </view>
            <button class="cu-btn bg-{{audioUploadPath!=''?'green':'grey'}} shadow" @tap='onClickPlayRecord'>播放录音
            </button>
        </view>
        <audio-record @audioChange.user="onAudioChange" :audioUploadPath.sync="audioUploadPath"></audio-record>
    </block>

    <block wx:if="{{type === '选择题'}}">
        <view class='cu-form-group'>
            <view class='title'>选项配置</view>
            <picker bindchange='selectionConfigChange' name='EselectionConfig' range='{{selectionConfigPicker}}'
                    value='{{selectionConfigIndex}}'
                    mode="multiSelector">
                <view class='picker'>
                    <text class='text-lg'>{{ selectionConfigPicker[0][selectionConfigIndex[0]] + "-" + selectionConfigPicker[1][selectionConfigIndex[1]] }}</text>
                </view>
            </picker>
        </view>
        <view class='cu-form-group'>
            <view class='title'>正确选项</view>
            <selection-picker
                @selectionChange.user="onSelectionChange"
                name='EanswerTxt'
                :value.sync="selectionAnswerIndex"
                :selectionConfig.sync="selectionConfigIndex"
            ></selection-picker>
        </view>
    </block>

    <view class='cu-form-group' wx:else>
        <view class='title'>习题答案文字</view>
        <input name='EanswerTxt' value="{{exercise.EanswerTxt}}" bindinput="onAnswerChange" placeholder='习题答案文字'></input>
    </view>

    <view class='bg-white' style='border-top:1rpx solid #eee;'>
        <answer-image-list
            @imageListChange.user="onImageListOfAnswerChange"
            :imageList.sync='imageListOfAnswer'
            type='add'
            title="习题答案图片"
        >
        </answer-image-list>
    </view>

    <view class="padding flex justify-center bg-white">
        <button class="cu-btn bg-green shadow lg" form-type="submit">提交修改</button>
    </view>
</form>
</template>

<script>
import {
    autoCorrectRange,
    difficultRange,
    gradeRange,
    selectionConfigRange,
    subjectRange,
    typeRange
} from '@/common/constant';

const innerAudioContext = wx.createInnerAudioContext()
import wepy from 'wepy'
import {getSubjectAndType, getSubjectAndTypeIndex} from "@/common/param-conversion";
import {AUTO_CORRECT} from "@/common/constant";
import SubjectAndTypePicker from "@/components/subject-and-type-picker";
import {AUDIO_URL, IMAGE_OF_EXERCISE_URL} from "@/common/url";
import ImageList from "@/components/image-list";
import AudioRecord from "@/components/audio-record";
import SelectionPicker from "@/components/selection-picker";
import {audioUpload, uploadImageList} from "@/common/uploadFile";
import {isValidValue} from "@/common/utils";
import {requiredName} from "@/common/validate-tool";
import WxValidate from "@/utils/WxValidate";
export default class Index extends wepy.page{
    components = {
        'subject-and-type-picker': SubjectAndTypePicker,
        'name-image-list': ImageList,
        'audio-record': AudioRecord,
        'answer-image-list': ImageList,
        'selection-picker': SelectionPicker,
    }
    data={
        imageListOfName:[],
        imageListOfAnswer: [],
        subjectAndTypeValue: [null, null],
        exercise:{},
        imgList: {
            name:[],
            answer:[],
        },
        type: undefined,
        selectionConfigIndex: [0, 0],
        gradePicker: gradeRange,
        difficultyPicker: difficultRange,
        autoCorrectPicker: autoCorrectRange,
        selectionConfigPicker: selectionConfigRange,
        gradeIndex: null,
        subjectIndex: null,
        typeIndex: null,
        difficultyIndex: 0,
        autoCorrectIndex: 0,
        nameUploadPath:"",
        answerUploadPath:"",
        audioUploadPath:"",
        selectionAnswerIndex: null,
    }

    watch = {
        subjectAndTypeValue(newValue){
            const subject = subjectRange[newValue[0]];
            this.type = typeRange[subject][newValue[1]];
            this.$apply();
        },
        type(newType, oldType){
            const autoCorrect = autoCorrectRange[this.autoCorrectIndex].value;
            if(newType === "选择题" && oldType !== newType && autoCorrect !== AUTO_CORRECT.AUTO){
                console.log("Watch type");
                this.EanswerTxt = null;
                this.selectionAnswerIndex = null;
                this.$apply();
                wx.showModal({
                    content: '需要将题目的批改方式变更为自动模式吗？',
                    success: res=>{
                        if (res.confirm) {
                            this.autoCorrectIndex = 0;
                            this.$apply();
                        }
                    }
                })
            }
        },
    }

    methods= {
        selectionConfigChange(e){
            if(this.selectionConfigIndex[0] !== e.detail.value[0]){
                this.selectionAnswerIndex = null;
            }
            this.selectionConfigIndex = e.detail.value;
        },
        onSelectionChange(value){
            this.selectionAnswerIndex = value;
        },
        onAudioChange(filePath){
            this.audioUploadPath = filePath;
        },
        onImageListOfNameChange(value){
            this.imageListOfName = value;
        },
        onImageListOfAnswerChange(value){
            this.imageListOfAnswer = value;
        },
        pickerAutoCorrectChange(e){
            this.autoCorrectIndex = e.detail.value;
        },
        pickerDifficultyChange(e) {
            this.difficultyIndex = e.detail.value
        },

        pickerGradeChange(e){
            this.gradeIndex = e.detail.value
        },

        onAnswerChange:(e) => {
            this.exercise.EanswerTxt = e.detail.value;
        },

        onClickPlayRecord() {
            innerAudioContext.src = this.audioUploadPath;
            innerAudioContext.play();
            innerAudioContext.onEnded(() => {
                innerAudioContext.stop();
            });
        },

        async formSubmit(e) {
            let self = this;

            let sendFormData = e.detail.value; // form 表单数据
            console.log(sendFormData);
            const {subject, type} = getSubjectAndType(this.subjectAndTypeValue);
            sendFormData.Esubject = subject;
            sendFormData.Etype = type;
            if (!self.validator.checkForm(sendFormData)) {
                //表单元素验证不通过，此处给出相应提示
                let error = self.validator.errorList[0];
                wx.showToast({
                    title: error.msg, //提示的内容,
                    icon: 'none', //图标,
                    mask: true, //显示透明蒙层，防止触摸穿透,
                    success: res => {}
                });
                return false;
            }


            const EautoCorrect = autoCorrectRange[sendFormData.EautoCorrect].value;
            if(EautoCorrect === AUTO_CORRECT.AUTO && !sendFormData.EanswerTxt.trim()){
                wx.showModal({
                    content: '自动批改类题目，请设置文字答案',
                    showCancel: false,
                })
                return;
            }
            sendFormData.EautoCorrect = EautoCorrect;

            if(type === "听写"){
                if(!this.audioUploadPath){
                    wx.showToast({
                        title: "请添加听力音频",
                        icon: 'none', //图标,
                        mask: true, //显示透明蒙层，防止触摸穿透,
                    });
                    return;
                }
                try{
                    const resultPath = await audioUpload(this.audioUploadPath);
                    if(!resultPath){
                        throw new Error("录音路径为空");
                    }
                    if(!sendFormData.EnameTxt){
                        sendFormData.EnameTxt = "听力";
                    }
                    sendFormData.EnamePath = resultPath;
                }catch(e){
                    wx.showModal({
                        content: '上传音频失败，请重试',
                        showCancel: false,
                    })
                    return;
                }
            }

            if(type === "选择题"){
                if(isValidValue(this.selectionConfigIndex[0]) && isValidValue(this.selectionConfigIndex[1])){
                    sendFormData.EtypeDetail = JSON.stringify(this.selectionConfigIndex);
                }else{
                    wx.showToast({
                        title: "请选择选择题设置", //提示的内容,
                        icon: 'none', //图标,
                        mask: true, //显示透明蒙层，防止触摸穿透,
                        success: res => {}
                    });
                    return false;
                }
            }

            if(this.imageListOfName.length === 0 && !sendFormData.EnameTxt){
                wx.showToast({
                    title: "请输入题目", //提示的内容,
                    icon: 'none', //图标,
                    mask: true, //显示透明蒙层，防止触摸穿透,
                });
                return false;
            }

            if(this.imageListOfAnswer.length === 0 && !sendFormData.EanswerTxt){
                wx.showToast({
                    title: "请输入答案", //提示的内容,
                    icon: 'none', //图标,
                    mask: true, //显示透明蒙层，防止触摸穿透,
                });
                return false;
            }

            if(this.imageListOfName.length > 0){
                const { imageUrlList, failedImageList } = await uploadImageList(this.imageListOfName, "exercise");
                console.log(imageUrlList, failedImageList);
                if(failedImageList.length > 0){
                    wx.showToast({
                        title: "上传图片失败，请检查网络", //提示的内容,
                        icon: 'none', //图标,
                        mask: true, //显示透明蒙层，防止触摸穿透,
                    });
                    return false;
                }else{
                    sendFormData.EnamePath = imageUrlList.join(";");
                }
            }
            if(this.imageListOfAnswer.length > 0){
                const { imageUrlList, failedImageList } = await uploadImageList(this.imageListOfAnswer, "exercise");
                if(failedImageList.length > 0){
                    wx.showToast({
                        title: "上传图片失败，请检查网络", //提示的内容,
                        icon: 'none', //图标,
                        mask: true, //显示透明蒙层，防止触摸穿透,
                    });
                    return false;
                }else{
                    sendFormData.EanswerPath = imageUrlList.join(";");
                }
            }
            sendFormData.Eid = Number(this.Eid);
            wepy.$instance.putWithToken('/app/exercise/update_exercise', sendFormData).then(
                function (res) {
                    if (res.data.Code == 1){
                        wepy.showToast({
                            title: '修改成功', //提示的内容,
                            icon: 'success', //图标,
                            duration: 2000, //延迟时间,
                            mask: true, //显示透明蒙层，防止触摸穿透,
                            success: function(){
                                setTimeout(function(){
                                    wepy.navigateBack({
                                        delta: 1
                                    })
                                }, 1000)

                            },
                        });
                    }
                }
            );
        }
    }

    findIndex(){
        let self = this
        for(let i=0;i<self.gradePicker.length;i++){
            if(self.gradePicker[i] == self.exercise.Egrade){
                self.gradeIndex = i
            }
        }
        for(let i=0;i<self.difficultyPicker.length;i++){
            if(self.difficultyPicker[i] == self.exercise.Edifficulty){
                self.difficultyIndex = i
            }
        }
        for(let i = 0; i < self.autoCorrectPicker.length; i++){
            if(self.autoCorrectPicker[i].value === self.exercise.EautoCorrect){
                self.autoCorrectIndex = i
            }
        }
        console.log(this);
    }

    getExercise(data){
        wepy.$instance.getWithToken('/app/exercise/get_exercise', data).then((res) => {
            const {Code, Data} = res.data;
            if(Code != 1){
                wx.showModal({
                    content: '获取数据失败，请刷新重试',
                    showCancel: false,
                })
                return;
            }
            this.exercise = Data;
            const {Esubject, Etype, EnamePath, EanswerPath, EtypeDetail, EanswerTxt} = this.exercise;
            if(Etype !== "听写" && EnamePath){
                this.imgList.name = EnamePath.split(";").map(x => IMAGE_OF_EXERCISE_URL + x);
                this.imageListOfName = this.imgList.name;
            }else{
                this.audioUploadPath = AUDIO_URL + this.exercise.EnamePath;
            }
            if(Etype === "选择题"){
                if(EtypeDetail){
                    this.selectionConfigIndex = JSON.parse(EtypeDetail);
                }
                this.selectionAnswerIndex = EanswerTxt;
                console.log(this.selectionAnswerIndex);
            }
            if(EanswerPath){
                this.imgList.answer = EanswerPath.split(";").map(x => IMAGE_OF_EXERCISE_URL + x);
                this.imageListOfAnswer = this.imgList.answer;
            }
            this.subjectAndTypeValue = getSubjectAndTypeIndex(Esubject, Etype);
            this.findIndex();
            this.$apply();
        })
    }

    initValidate() {
        let nameMap = {
            Etitle: "请选择标题",
            Egrade: "请选择年级",
            Esubject: "请选择学科",
            Etype: "请选择题目类型",
            Edifficulty: "请选择难度",
        }
        const {rules, messages} = requiredName(nameMap);
        //实例化当前的验证规则和提示消息
        this.validator = new WxValidate(rules, messages);
    }

    onLoad(options) {
        this.Eid = options.eid;
        this.getExercise({Eid: this.Eid});
        this.initValidate();
    }
}
</script>
